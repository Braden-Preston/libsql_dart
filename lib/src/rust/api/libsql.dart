// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../utils/parameters.dart';
import '../utils/return_value.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `DATABASE_REGISTRY`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `initialize`

Future<ConnectResult> connect({required ConnectArgs args}) =>
    RustLib.instance.api.crateApiLibsqlConnect(args: args);

Future<SyncResult> sync({required SyncArgs args}) =>
    RustLib.instance.api.crateApiLibsqlSync(args: args);

Future<QueryResult> query({required QueryArgs args}) =>
    RustLib.instance.api.crateApiLibsqlQuery(args: args);

Future<ExecuteResult> execute({required ExecuteArgs args}) =>
    RustLib.instance.api.crateApiLibsqlExecute(args: args);

class ConnectArgs {
  final String url;
  final String? authToken;
  final String? syncUrl;
  final BigInt? syncIntervalSeconds;
  final String? encryptionKey;
  final bool? readYourWrites;
  final LibsqlOpenFlags? openFlags;

  const ConnectArgs({
    required this.url,
    this.authToken,
    this.syncUrl,
    this.syncIntervalSeconds,
    this.encryptionKey,
    this.readYourWrites,
    this.openFlags,
  });

  @override
  int get hashCode =>
      url.hashCode ^
      authToken.hashCode ^
      syncUrl.hashCode ^
      syncIntervalSeconds.hashCode ^
      encryptionKey.hashCode ^
      readYourWrites.hashCode ^
      openFlags.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConnectArgs &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          authToken == other.authToken &&
          syncUrl == other.syncUrl &&
          syncIntervalSeconds == other.syncIntervalSeconds &&
          encryptionKey == other.encryptionKey &&
          readYourWrites == other.readYourWrites &&
          openFlags == other.openFlags;
}

class ConnectResult {
  final String? errorMessage;
  final String? dbId;

  const ConnectResult({
    this.errorMessage,
    this.dbId,
  });

  @override
  int get hashCode => errorMessage.hashCode ^ dbId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConnectResult &&
          runtimeType == other.runtimeType &&
          errorMessage == other.errorMessage &&
          dbId == other.dbId;
}

class ExecuteArgs {
  final String dbId;
  final String sql;
  final Parameters? parameters;

  const ExecuteArgs({
    required this.dbId,
    required this.sql,
    this.parameters,
  });

  @override
  int get hashCode => dbId.hashCode ^ sql.hashCode ^ parameters.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExecuteArgs &&
          runtimeType == other.runtimeType &&
          dbId == other.dbId &&
          sql == other.sql &&
          parameters == other.parameters;
}

class ExecuteResult {
  final BigInt rowsAffected;
  final String? errorMessage;

  const ExecuteResult({
    required this.rowsAffected,
    this.errorMessage,
  });

  @override
  int get hashCode => rowsAffected.hashCode ^ errorMessage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExecuteResult &&
          runtimeType == other.runtimeType &&
          rowsAffected == other.rowsAffected &&
          errorMessage == other.errorMessage;
}

enum LibsqlOpenFlags {
  readOnly,
  readWrite,
  create,
  ;
}

class QueryArgs {
  final String dbId;
  final String sql;
  final Parameters? parameters;

  const QueryArgs({
    required this.dbId,
    required this.sql,
    this.parameters,
  });

  @override
  int get hashCode => dbId.hashCode ^ sql.hashCode ^ parameters.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QueryArgs &&
          runtimeType == other.runtimeType &&
          dbId == other.dbId &&
          sql == other.sql &&
          parameters == other.parameters;
}

class QueryResult {
  final List<Map<String, ReturnValue>> rows;
  final BigInt rowsAffected;
  final PlatformInt64 lastInsertRowid;
  final String? errorMessage;

  const QueryResult({
    required this.rows,
    required this.rowsAffected,
    required this.lastInsertRowid,
    this.errorMessage,
  });

  @override
  int get hashCode =>
      rows.hashCode ^
      rowsAffected.hashCode ^
      lastInsertRowid.hashCode ^
      errorMessage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QueryResult &&
          runtimeType == other.runtimeType &&
          rows == other.rows &&
          rowsAffected == other.rowsAffected &&
          lastInsertRowid == other.lastInsertRowid &&
          errorMessage == other.errorMessage;
}

class SyncArgs {
  final String dbId;

  const SyncArgs({
    required this.dbId,
  });

  @override
  int get hashCode => dbId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SyncArgs &&
          runtimeType == other.runtimeType &&
          dbId == other.dbId;
}

class SyncResult {
  final String? errorMessage;

  const SyncResult({
    this.errorMessage,
  });

  @override
  int get hashCode => errorMessage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SyncResult &&
          runtimeType == other.runtimeType &&
          errorMessage == other.errorMessage;
}
