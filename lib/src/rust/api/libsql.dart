// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `DATABASE_REGISTRY`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `initialize`

Future<CreateDbResponse> createDb({required CreateDbRequest request}) =>
    RustLib.instance.api.crateApiLibsqlCreateDb(request: request);

Future<SyncDbResponse> syncDb({required SyncDbRequest request}) =>
    RustLib.instance.api.crateApiLibsqlSyncDb(request: request);

class CreateDbRequest {
  final String replicaPath;
  final String syncUrl;
  final String syncToken;
  final BigInt? syncIntervalMilliseconds;

  const CreateDbRequest({
    required this.replicaPath,
    required this.syncUrl,
    required this.syncToken,
    this.syncIntervalMilliseconds,
  });

  @override
  int get hashCode =>
      replicaPath.hashCode ^
      syncUrl.hashCode ^
      syncToken.hashCode ^
      syncIntervalMilliseconds.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CreateDbRequest &&
          runtimeType == other.runtimeType &&
          replicaPath == other.replicaPath &&
          syncUrl == other.syncUrl &&
          syncToken == other.syncToken &&
          syncIntervalMilliseconds == other.syncIntervalMilliseconds;
}

class CreateDbResponse {
  final bool success;
  final String? dbId;

  const CreateDbResponse({
    required this.success,
    this.dbId,
  });

  @override
  int get hashCode => success.hashCode ^ dbId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CreateDbResponse &&
          runtimeType == other.runtimeType &&
          success == other.success &&
          dbId == other.dbId;
}

class SyncDbRequest {
  final String dbId;

  const SyncDbRequest({
    required this.dbId,
  });

  @override
  int get hashCode => dbId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SyncDbRequest &&
          runtimeType == other.runtimeType &&
          dbId == other.dbId;
}

class SyncDbResponse {
  final bool success;

  const SyncDbResponse({
    required this.success,
  });

  @override
  int get hashCode => success.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SyncDbResponse &&
          runtimeType == other.runtimeType &&
          success == other.success;
}
