// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/libsql.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/parameters.dart';
import 'utils/return_value.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiLibsqlInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.2.0';

  @override
  int get rustContentHash => -759774325;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'libsql_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BatchResult> crateApiLibsqlBatch({required BatchArgs args});

  Future<void> crateApiLibsqlClose({required String dbId});

  Future<ConnectResult> crateApiLibsqlConnect({required ConnectArgs args});

  Future<ExecuteResult> crateApiLibsqlExecute({required ExecuteArgs args});

  Future<void> crateApiLibsqlInitApp();

  Future<PrepareResult> crateApiLibsqlPrepare({required PrepareArgs args});

  Future<QueryResult> crateApiLibsqlQuery({required QueryArgs args});

  Future<StatementExecuteResult> crateApiLibsqlStatementExecute(
      {required StatementExecuteArgs args});

  Future<void> crateApiLibsqlStatementFinalize({required String statementId});

  Future<StatementQueryResult> crateApiLibsqlStatementQuery(
      {required StatementQueryArgs args});

  Future<void> crateApiLibsqlStatementReset({required String statementId});

  Future<SyncResult> crateApiLibsqlSync({required SyncArgs args});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BatchResult> crateApiLibsqlBatch({required BatchArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_batch_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_batch_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlBatchConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlBatchConstMeta => const TaskConstMeta(
        debugName: "batch",
        argNames: ["args"],
      );

  @override
  Future<void> crateApiLibsqlClose({required String dbId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlCloseConstMeta,
      argValues: [dbId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlCloseConstMeta => const TaskConstMeta(
        debugName: "close",
        argNames: ["dbId"],
      );

  @override
  Future<ConnectResult> crateApiLibsqlConnect({required ConnectArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_connect_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_connect_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlConnectConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlConnectConstMeta => const TaskConstMeta(
        debugName: "connect",
        argNames: ["args"],
      );

  @override
  Future<ExecuteResult> crateApiLibsqlExecute({required ExecuteArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_execute_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_execute_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlExecuteConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlExecuteConstMeta => const TaskConstMeta(
        debugName: "execute",
        argNames: ["args"],
      );

  @override
  Future<void> crateApiLibsqlInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<PrepareResult> crateApiLibsqlPrepare({required PrepareArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_prepare_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_prepare_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlPrepareConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlPrepareConstMeta => const TaskConstMeta(
        debugName: "prepare",
        argNames: ["args"],
      );

  @override
  Future<QueryResult> crateApiLibsqlQuery({required QueryArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_query_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_query_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlQueryConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlQueryConstMeta => const TaskConstMeta(
        debugName: "query",
        argNames: ["args"],
      );

  @override
  Future<StatementExecuteResult> crateApiLibsqlStatementExecute(
      {required StatementExecuteArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_statement_execute_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_statement_execute_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlStatementExecuteConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlStatementExecuteConstMeta =>
      const TaskConstMeta(
        debugName: "statement_execute",
        argNames: ["args"],
      );

  @override
  Future<void> crateApiLibsqlStatementFinalize({required String statementId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(statementId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlStatementFinalizeConstMeta,
      argValues: [statementId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlStatementFinalizeConstMeta =>
      const TaskConstMeta(
        debugName: "statement_finalize",
        argNames: ["statementId"],
      );

  @override
  Future<StatementQueryResult> crateApiLibsqlStatementQuery(
      {required StatementQueryArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_statement_query_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_statement_query_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlStatementQueryConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlStatementQueryConstMeta =>
      const TaskConstMeta(
        debugName: "statement_query",
        argNames: ["args"],
      );

  @override
  Future<void> crateApiLibsqlStatementReset({required String statementId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(statementId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlStatementResetConstMeta,
      argValues: [statementId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlStatementResetConstMeta =>
      const TaskConstMeta(
        debugName: "statement_reset",
        argNames: ["statementId"],
      );

  @override
  Future<SyncResult> crateApiLibsqlSync({required SyncArgs args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sync_args(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sync_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLibsqlSyncConstMeta,
      argValues: [args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLibsqlSyncConstMeta => const TaskConstMeta(
        debugName: "sync",
        argNames: ["args"],
      );

  @protected
  Map<String, ParamValue> dco_decode_Map_String_param_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_param_value(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, ReturnValue> dco_decode_Map_String_return_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_return_value(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BatchArgs dco_decode_batch_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BatchArgs(
      dbId: dco_decode_String(arr[0]),
      sql: dco_decode_String(arr[1]),
    );
  }

  @protected
  BatchResult dco_decode_batch_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BatchResult(
      errorMessage: dco_decode_opt_String(arr[0]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BatchArgs dco_decode_box_autoadd_batch_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_batch_args(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ConnectArgs dco_decode_box_autoadd_connect_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_connect_args(raw);
  }

  @protected
  ExecuteArgs dco_decode_box_autoadd_execute_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_execute_args(raw);
  }

  @protected
  LibsqlOpenFlags dco_decode_box_autoadd_libsql_open_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_libsql_open_flags(raw);
  }

  @protected
  Parameters dco_decode_box_autoadd_parameters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_parameters(raw);
  }

  @protected
  PrepareArgs dco_decode_box_autoadd_prepare_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_prepare_args(raw);
  }

  @protected
  QueryArgs dco_decode_box_autoadd_query_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_query_args(raw);
  }

  @protected
  StatementExecuteArgs dco_decode_box_autoadd_statement_execute_args(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_statement_execute_args(raw);
  }

  @protected
  StatementQueryArgs dco_decode_box_autoadd_statement_query_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_statement_query_args(raw);
  }

  @protected
  SyncArgs dco_decode_box_autoadd_sync_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sync_args(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  ConnectArgs dco_decode_connect_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ConnectArgs(
      url: dco_decode_String(arr[0]),
      authToken: dco_decode_opt_String(arr[1]),
      syncUrl: dco_decode_opt_String(arr[2]),
      syncIntervalSeconds: dco_decode_opt_box_autoadd_u_64(arr[3]),
      encryptionKey: dco_decode_opt_String(arr[4]),
      readYourWrites: dco_decode_opt_box_autoadd_bool(arr[5]),
      openFlags: dco_decode_opt_box_autoadd_libsql_open_flags(arr[6]),
    );
  }

  @protected
  ConnectResult dco_decode_connect_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ConnectResult(
      errorMessage: dco_decode_opt_String(arr[0]),
      dbId: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  ExecuteArgs dco_decode_execute_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExecuteArgs(
      dbId: dco_decode_String(arr[0]),
      sql: dco_decode_String(arr[1]),
      parameters: dco_decode_opt_box_autoadd_parameters(arr[2]),
    );
  }

  @protected
  ExecuteResult dco_decode_execute_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ExecuteResult(
      rowsAffected: dco_decode_u_64(arr[0]),
      errorMessage: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  LibsqlOpenFlags dco_decode_libsql_open_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LibsqlOpenFlags.values[raw as int];
  }

  @protected
  List<Map<String, ReturnValue>> dco_decode_list_Map_String_return_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_Map_String_return_value)
        .toList();
  }

  @protected
  List<ParamValue> dco_decode_list_param_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_param_value).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, ParamValue)> dco_decode_list_record_string_param_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_param_value)
        .toList();
  }

  @protected
  List<(String, ReturnValue)> dco_decode_list_record_string_return_value(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_return_value)
        .toList();
  }

  @protected
  Map<String, ParamValue>? dco_decode_opt_Map_String_param_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_Map_String_param_value(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  LibsqlOpenFlags? dco_decode_opt_box_autoadd_libsql_open_flags(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_libsql_open_flags(raw);
  }

  @protected
  Parameters? dco_decode_opt_box_autoadd_parameters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_parameters(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<ParamValue>? dco_decode_opt_list_param_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_param_value(raw);
  }

  @protected
  ParamValue dco_decode_param_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ParamValue_Integer(
          dco_decode_i_64(raw[1]),
        );
      case 1:
        return ParamValue_Real(
          dco_decode_f_64(raw[1]),
        );
      case 2:
        return ParamValue_Text(
          dco_decode_String(raw[1]),
        );
      case 3:
        return ParamValue_Blob(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 4:
        return ParamValue_Null();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Parameters dco_decode_parameters(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Parameters(
      positional: dco_decode_opt_list_param_value(arr[0]),
      named: dco_decode_opt_Map_String_param_value(arr[1]),
    );
  }

  @protected
  PrepareArgs dco_decode_prepare_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareArgs(
      dbId: dco_decode_String(arr[0]),
      sql: dco_decode_String(arr[1]),
    );
  }

  @protected
  PrepareResult dco_decode_prepare_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareResult(
      statementId: dco_decode_opt_String(arr[0]),
      errorMessage: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  QueryArgs dco_decode_query_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return QueryArgs(
      dbId: dco_decode_String(arr[0]),
      sql: dco_decode_String(arr[1]),
      parameters: dco_decode_opt_box_autoadd_parameters(arr[2]),
    );
  }

  @protected
  QueryResult dco_decode_query_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return QueryResult(
      rows: dco_decode_list_Map_String_return_value(arr[0]),
      rowsAffected: dco_decode_u_64(arr[1]),
      lastInsertRowid: dco_decode_i_64(arr[2]),
      errorMessage: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  (String, ParamValue) dco_decode_record_string_param_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_param_value(arr[1]),
    );
  }

  @protected
  (String, ReturnValue) dco_decode_record_string_return_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_return_value(arr[1]),
    );
  }

  @protected
  ReturnValue dco_decode_return_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ReturnValue_Integer(
          dco_decode_i_64(raw[1]),
        );
      case 1:
        return ReturnValue_Real(
          dco_decode_f_64(raw[1]),
        );
      case 2:
        return ReturnValue_Text(
          dco_decode_String(raw[1]),
        );
      case 3:
        return ReturnValue_Blob(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 4:
        return ReturnValue_Null();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  StatementExecuteArgs dco_decode_statement_execute_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StatementExecuteArgs(
      statementId: dco_decode_String(arr[0]),
      parameters: dco_decode_opt_box_autoadd_parameters(arr[1]),
    );
  }

  @protected
  StatementExecuteResult dco_decode_statement_execute_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StatementExecuteResult(
      rowsAffected: dco_decode_u_64(arr[0]),
      errorMessage: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  StatementQueryArgs dco_decode_statement_query_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return StatementQueryArgs(
      statementId: dco_decode_String(arr[0]),
      parameters: dco_decode_opt_box_autoadd_parameters(arr[1]),
    );
  }

  @protected
  StatementQueryResult dco_decode_statement_query_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return StatementQueryResult(
      rows: dco_decode_list_Map_String_return_value(arr[0]),
      rowsAffected: dco_decode_u_64(arr[1]),
      lastInsertRowid: dco_decode_i_64(arr[2]),
      errorMessage: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  SyncArgs dco_decode_sync_args(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SyncArgs(
      dbId: dco_decode_String(arr[0]),
    );
  }

  @protected
  SyncResult dco_decode_sync_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SyncResult(
      errorMessage: dco_decode_opt_String(arr[0]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  Map<String, ParamValue> sse_decode_Map_String_param_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_param_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, ReturnValue> sse_decode_Map_String_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_return_value(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BatchArgs sse_decode_batch_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dbId = sse_decode_String(deserializer);
    var var_sql = sse_decode_String(deserializer);
    return BatchArgs(dbId: var_dbId, sql: var_sql);
  }

  @protected
  BatchResult sse_decode_batch_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return BatchResult(errorMessage: var_errorMessage);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  BatchArgs sse_decode_box_autoadd_batch_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_batch_args(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  ConnectArgs sse_decode_box_autoadd_connect_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_connect_args(deserializer));
  }

  @protected
  ExecuteArgs sse_decode_box_autoadd_execute_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_execute_args(deserializer));
  }

  @protected
  LibsqlOpenFlags sse_decode_box_autoadd_libsql_open_flags(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_libsql_open_flags(deserializer));
  }

  @protected
  Parameters sse_decode_box_autoadd_parameters(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_parameters(deserializer));
  }

  @protected
  PrepareArgs sse_decode_box_autoadd_prepare_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_prepare_args(deserializer));
  }

  @protected
  QueryArgs sse_decode_box_autoadd_query_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_query_args(deserializer));
  }

  @protected
  StatementExecuteArgs sse_decode_box_autoadd_statement_execute_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_statement_execute_args(deserializer));
  }

  @protected
  StatementQueryArgs sse_decode_box_autoadd_statement_query_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_statement_query_args(deserializer));
  }

  @protected
  SyncArgs sse_decode_box_autoadd_sync_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sync_args(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  ConnectArgs sse_decode_connect_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_authToken = sse_decode_opt_String(deserializer);
    var var_syncUrl = sse_decode_opt_String(deserializer);
    var var_syncIntervalSeconds = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_encryptionKey = sse_decode_opt_String(deserializer);
    var var_readYourWrites = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_openFlags =
        sse_decode_opt_box_autoadd_libsql_open_flags(deserializer);
    return ConnectArgs(
        url: var_url,
        authToken: var_authToken,
        syncUrl: var_syncUrl,
        syncIntervalSeconds: var_syncIntervalSeconds,
        encryptionKey: var_encryptionKey,
        readYourWrites: var_readYourWrites,
        openFlags: var_openFlags);
  }

  @protected
  ConnectResult sse_decode_connect_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_errorMessage = sse_decode_opt_String(deserializer);
    var var_dbId = sse_decode_opt_String(deserializer);
    return ConnectResult(errorMessage: var_errorMessage, dbId: var_dbId);
  }

  @protected
  ExecuteArgs sse_decode_execute_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dbId = sse_decode_String(deserializer);
    var var_sql = sse_decode_String(deserializer);
    var var_parameters = sse_decode_opt_box_autoadd_parameters(deserializer);
    return ExecuteArgs(
        dbId: var_dbId, sql: var_sql, parameters: var_parameters);
  }

  @protected
  ExecuteResult sse_decode_execute_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rowsAffected = sse_decode_u_64(deserializer);
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return ExecuteResult(
        rowsAffected: var_rowsAffected, errorMessage: var_errorMessage);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  LibsqlOpenFlags sse_decode_libsql_open_flags(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return LibsqlOpenFlags.values[inner];
  }

  @protected
  List<Map<String, ReturnValue>> sse_decode_list_Map_String_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Map<String, ReturnValue>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_Map_String_return_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<ParamValue> sse_decode_list_param_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ParamValue>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_param_value(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, ParamValue)> sse_decode_list_record_string_param_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ParamValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_param_value(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, ReturnValue)> sse_decode_list_record_string_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, ReturnValue)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_return_value(deserializer));
    }
    return ans_;
  }

  @protected
  Map<String, ParamValue>? sse_decode_opt_Map_String_param_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_param_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LibsqlOpenFlags? sse_decode_opt_box_autoadd_libsql_open_flags(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_libsql_open_flags(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Parameters? sse_decode_opt_box_autoadd_parameters(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_parameters(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ParamValue>? sse_decode_opt_list_param_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_param_value(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ParamValue sse_decode_param_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_64(deserializer);
        return ParamValue_Integer(var_field0);
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return ParamValue_Real(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return ParamValue_Text(var_field0);
      case 3:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return ParamValue_Blob(var_field0);
      case 4:
        return ParamValue_Null();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Parameters sse_decode_parameters(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_positional = sse_decode_opt_list_param_value(deserializer);
    var var_named = sse_decode_opt_Map_String_param_value(deserializer);
    return Parameters(positional: var_positional, named: var_named);
  }

  @protected
  PrepareArgs sse_decode_prepare_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dbId = sse_decode_String(deserializer);
    var var_sql = sse_decode_String(deserializer);
    return PrepareArgs(dbId: var_dbId, sql: var_sql);
  }

  @protected
  PrepareResult sse_decode_prepare_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_statementId = sse_decode_opt_String(deserializer);
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return PrepareResult(
        statementId: var_statementId, errorMessage: var_errorMessage);
  }

  @protected
  QueryArgs sse_decode_query_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dbId = sse_decode_String(deserializer);
    var var_sql = sse_decode_String(deserializer);
    var var_parameters = sse_decode_opt_box_autoadd_parameters(deserializer);
    return QueryArgs(dbId: var_dbId, sql: var_sql, parameters: var_parameters);
  }

  @protected
  QueryResult sse_decode_query_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rows = sse_decode_list_Map_String_return_value(deserializer);
    var var_rowsAffected = sse_decode_u_64(deserializer);
    var var_lastInsertRowid = sse_decode_i_64(deserializer);
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return QueryResult(
        rows: var_rows,
        rowsAffected: var_rowsAffected,
        lastInsertRowid: var_lastInsertRowid,
        errorMessage: var_errorMessage);
  }

  @protected
  (String, ParamValue) sse_decode_record_string_param_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_param_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, ReturnValue) sse_decode_record_string_return_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_return_value(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ReturnValue sse_decode_return_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_64(deserializer);
        return ReturnValue_Integer(var_field0);
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return ReturnValue_Real(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return ReturnValue_Text(var_field0);
      case 3:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return ReturnValue_Blob(var_field0);
      case 4:
        return ReturnValue_Null();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  StatementExecuteArgs sse_decode_statement_execute_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_statementId = sse_decode_String(deserializer);
    var var_parameters = sse_decode_opt_box_autoadd_parameters(deserializer);
    return StatementExecuteArgs(
        statementId: var_statementId, parameters: var_parameters);
  }

  @protected
  StatementExecuteResult sse_decode_statement_execute_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rowsAffected = sse_decode_u_64(deserializer);
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return StatementExecuteResult(
        rowsAffected: var_rowsAffected, errorMessage: var_errorMessage);
  }

  @protected
  StatementQueryArgs sse_decode_statement_query_args(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_statementId = sse_decode_String(deserializer);
    var var_parameters = sse_decode_opt_box_autoadd_parameters(deserializer);
    return StatementQueryArgs(
        statementId: var_statementId, parameters: var_parameters);
  }

  @protected
  StatementQueryResult sse_decode_statement_query_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rows = sse_decode_list_Map_String_return_value(deserializer);
    var var_rowsAffected = sse_decode_u_64(deserializer);
    var var_lastInsertRowid = sse_decode_i_64(deserializer);
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return StatementQueryResult(
        rows: var_rows,
        rowsAffected: var_rowsAffected,
        lastInsertRowid: var_lastInsertRowid,
        errorMessage: var_errorMessage);
  }

  @protected
  SyncArgs sse_decode_sync_args(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_dbId = sse_decode_String(deserializer);
    return SyncArgs(dbId: var_dbId);
  }

  @protected
  SyncResult sse_decode_sync_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_errorMessage = sse_decode_opt_String(deserializer);
    return SyncResult(errorMessage: var_errorMessage);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_Map_String_param_value(
      Map<String, ParamValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_param_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_return_value(
      Map<String, ReturnValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_return_value(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_batch_args(BatchArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dbId, serializer);
    sse_encode_String(self.sql, serializer);
  }

  @protected
  void sse_encode_batch_result(BatchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_batch_args(
      BatchArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_batch_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_connect_args(
      ConnectArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_connect_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_execute_args(
      ExecuteArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_execute_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_libsql_open_flags(
      LibsqlOpenFlags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_libsql_open_flags(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_parameters(
      Parameters self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_parameters(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_prepare_args(
      PrepareArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_query_args(
      QueryArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_query_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_statement_execute_args(
      StatementExecuteArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_statement_execute_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_statement_query_args(
      StatementQueryArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_statement_query_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sync_args(
      SyncArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sync_args(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_connect_args(ConnectArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.authToken, serializer);
    sse_encode_opt_String(self.syncUrl, serializer);
    sse_encode_opt_box_autoadd_u_64(self.syncIntervalSeconds, serializer);
    sse_encode_opt_String(self.encryptionKey, serializer);
    sse_encode_opt_box_autoadd_bool(self.readYourWrites, serializer);
    sse_encode_opt_box_autoadd_libsql_open_flags(self.openFlags, serializer);
  }

  @protected
  void sse_encode_connect_result(ConnectResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.errorMessage, serializer);
    sse_encode_opt_String(self.dbId, serializer);
  }

  @protected
  void sse_encode_execute_args(ExecuteArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dbId, serializer);
    sse_encode_String(self.sql, serializer);
    sse_encode_opt_box_autoadd_parameters(self.parameters, serializer);
  }

  @protected
  void sse_encode_execute_result(ExecuteResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.rowsAffected, serializer);
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_libsql_open_flags(
      LibsqlOpenFlags self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_Map_String_return_value(
      List<Map<String, ReturnValue>> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Map_String_return_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_param_value(
      List<ParamValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_param_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_param_value(
      List<(String, ParamValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_param_value(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_return_value(
      List<(String, ReturnValue)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_return_value(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_Map_String_param_value(
      Map<String, ParamValue>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_param_value(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_libsql_open_flags(
      LibsqlOpenFlags? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_libsql_open_flags(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_parameters(
      Parameters? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_parameters(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_param_value(
      List<ParamValue>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_param_value(self, serializer);
    }
  }

  @protected
  void sse_encode_param_value(ParamValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ParamValue_Integer(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_64(field0, serializer);
      case ParamValue_Real(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
      case ParamValue_Text(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case ParamValue_Blob(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case ParamValue_Null():
        sse_encode_i_32(4, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_parameters(Parameters self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_param_value(self.positional, serializer);
    sse_encode_opt_Map_String_param_value(self.named, serializer);
  }

  @protected
  void sse_encode_prepare_args(PrepareArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dbId, serializer);
    sse_encode_String(self.sql, serializer);
  }

  @protected
  void sse_encode_prepare_result(PrepareResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.statementId, serializer);
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_query_args(QueryArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dbId, serializer);
    sse_encode_String(self.sql, serializer);
    sse_encode_opt_box_autoadd_parameters(self.parameters, serializer);
  }

  @protected
  void sse_encode_query_result(QueryResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Map_String_return_value(self.rows, serializer);
    sse_encode_u_64(self.rowsAffected, serializer);
    sse_encode_i_64(self.lastInsertRowid, serializer);
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_record_string_param_value(
      (String, ParamValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_param_value(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_return_value(
      (String, ReturnValue) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_return_value(self.$2, serializer);
  }

  @protected
  void sse_encode_return_value(ReturnValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ReturnValue_Integer(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_64(field0, serializer);
      case ReturnValue_Real(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
      case ReturnValue_Text(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case ReturnValue_Blob(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case ReturnValue_Null():
        sse_encode_i_32(4, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_statement_execute_args(
      StatementExecuteArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.statementId, serializer);
    sse_encode_opt_box_autoadd_parameters(self.parameters, serializer);
  }

  @protected
  void sse_encode_statement_execute_result(
      StatementExecuteResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.rowsAffected, serializer);
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_statement_query_args(
      StatementQueryArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.statementId, serializer);
    sse_encode_opt_box_autoadd_parameters(self.parameters, serializer);
  }

  @protected
  void sse_encode_statement_query_result(
      StatementQueryResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_Map_String_return_value(self.rows, serializer);
    sse_encode_u_64(self.rowsAffected, serializer);
    sse_encode_i_64(self.lastInsertRowid, serializer);
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_sync_args(SyncArgs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.dbId, serializer);
  }

  @protected
  void sse_encode_sync_result(SyncResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.errorMessage, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
